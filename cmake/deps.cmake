function(get_dependencies)
  option(USE_VENDORED_GLFW "Skip searching for system GLFW" OFF)
  option(USE_VENDORED_GLM "Skip searching for system GLN" OFF)
  option(USE_VENDORED_FMT "Skip searching for system fmtlib" OFF)

  if(NOT USE_VENDORED_GLFW)
    find_package(GLFW3 QUIET)
    if(GLFW3_FOUND)
      message(STATUS "Found system install of GLFW.")
    else()
      message(STATUS "Could not find GLFW, defaulting to the vendored version.")
    endif()
  endif()
  if(NOT GLFW3_FOUND)
    set(GLFW_BUILD_EXAMPLES OFF)
    set(GLFW_BUILD_TESTS OFF)
    set(GLFW_BUILD_DOCS OFF)
    add_subdirectory("${CMAKE_SOURCE_DIR}/external/glfw")
  endif()

  if(NOT USE_VENDORED_GLM)
    find_package(glm QUIET)
    if(glm_FOUND)
      message(STATUS "Found system install of GLM.")
    else()
      message(STATUS "Could not find GLM, defaulting to the vendored version.")
    endif()
  endif()
  if(NOT glm_FOUND)
    add_subdirectory("${CMAKE_SOURCE_DIR}/external/glm")
  endif()

  if(NOT USE_VENDORED_FMT)
    find_package(fmt QUIET)
    if(fmt_FOUND)
      message(STATUS "Found system install of fmt.")
    else()
      message(STATUS "Could not find fmt, defaulting to the vendored version.")
    endif()
  endif()
  if(NOT fmt_FOUND)
    add_subdirectory("${CMAKE_SOURCE_DIR}/external/fmt")
  endif()

  add_library(glad "${CMAKE_SOURCE_DIR}/external/glad/src/glad.c")
  target_include_directories(glad
                             PUBLIC "${CMAKE_SOURCE_DIR}/external/glad/include")

  add_library(stb_image "${CMAKE_SOURCE_DIR}/external/stb_image/stb_image.c")
  target_include_directories(stb_image
                             PUBLIC "${CMAKE_SOURCE_DIR}/external/stb_image")
endfunction(get_dependencies)
